{"version":3,"sources":["services/persons.js","App.js","index.js"],"names":["baseUrl","axios","get","then","response","data","catch","error","console","log","personObject","post","id","delete","patch","Filter","searchTerm","handleSearchChange","value","onChange","PersonForm","addPerson","newName","newNumber","handleNameChange","handleNumberChange","onSubmit","type","Persons","deletePerson","map","person","key","name","number","onClick","Messages","message","classes","className","App","useState","persons","setPersons","setNewName","setNewNumber","setSearchTerm","messages","setMessages","errors","setErrors","useEffect","personsService","handleSetMessages","setTimeout","handleSetErrors","personsToShow","filter","toLowerCase","includes","event","target","preventDefault","alert","listOfNames","nameLowerCase","window","confirm","existingObject","newObject","updatedPerson","updatedPersons","newPerson","concat","index","indexOf","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.6aafa755.chunk.js","sourcesContent":["import axios from 'axios'\nconst baseUrl = 'http://localhost:3001/api/persons'\n\nconst getAll = () => {\n    return axios.get(baseUrl)\n        .then(response => response.data)\n        .catch(error => console.log('error retrieving data from persons',\n            error))\n}\n\nconst create = (personObject) => {\n    return axios.post(baseUrl, personObject)\n        .then(response => response.data)\n}\n\nconst remove = (id) => {\n    return axios.delete(`${baseUrl}/${id}`)\n        .then(response => response)\n}\n\nconst update = (id, personObject) => {\n    return axios.patch(`${baseUrl}/${id}`, personObject)\n        .then(response => response.data)\n}\n\nexport default { getAll, create, remove, update }","import React, { useState, useEffect } from 'react'\nimport personsService from './services/persons'\n\nconst Filter = ({ searchTerm, handleSearchChange }) => {\n    return (\n        <div>\n            filter shown with <input value={searchTerm}\n                onChange={handleSearchChange} />\n        </div>\n    )\n}\n\nconst PersonForm = ({ addPerson, newName, newNumber, handleNameChange, handleNumberChange }) => {\n    return (\n        <form onSubmit={addPerson}>\n            <div>\n                name: <input value={newName} onChange={handleNameChange} />\n            </div>\n            <div>\n                number: <input value={newNumber} onChange={handleNumberChange} />\n            </div>\n            <div>\n                <button type=\"submit\">add</button>\n            </div>\n        </form>\n    )\n}\n\nconst Persons = ({ data, deletePerson }) => {\n    return data.map(person => {\n        return (\n            <div key={person.name}>{person.name} {person.number}\n                <button onClick={() => deletePerson(person.id)}>delete</button>\n            </div>\n        )\n    })\n}\n\n// provide interactive messages to the user to confirm actions have been completed\nconst Messages = ({ message, type }) => {\n    // if no message is passed through then do not output html\n    if (message === null) {\n        return null\n    }\n    // list of css classes to be applied\n    const classes = `messages ${type}`\n\n    return (\n        <div className={classes}>\n            {message}\n        </div>\n    )\n}\n\nconst App = () => {\n    const [persons, setPersons] = useState([])\n    const [newName, setNewName] = useState('')\n    const [newNumber, setNewNumber] = useState('')\n    const [searchTerm, setSearchTerm] = useState('')\n    const [messages, setMessages] = useState(null)\n    const [errors, setErrors] = useState(null)\n\n    // get data from server\n    useEffect(() => {\n        // retrieve data from db and store in persons variable\n        personsService.getAll()\n            .then(data => setPersons(data))\n    }, [])\n\n    const handleNameChange = (event) => {\n        setNewName(event.target.value)\n    }\n\n    const handleNumberChange = (event) => {\n        setNewNumber(event.target.value)\n    }\n\n    const handleSearchChange = (event) => {\n        setSearchTerm(event.target.value)\n    }\n\n    const handleSetMessages = (message) => {\n        setMessages(message)\n        setTimeout(() => setMessages(null), 5000)\n    }\n\n    const handleSetErrors = (message) => {\n        setErrors(message)\n        setTimeout(() => setErrors(null), 5000)\n    }\n\n    const addPerson = (event) => {\n        // stop form from refreshing page\n        event.preventDefault()\n\n        // check that both name and number are populated\n        if (newName === '' || newNumber === '') {\n            alert('You must provide values for name and number')\n            return null\n        }\n\n        // check that the name is not already in the list\n        // (name is used for key, cannot be duplicated)\n        const listOfNames = persons.map(person => person.name.toLowerCase())\n        const nameLowerCase = newName.toLowerCase()\n\n        if (listOfNames.includes(nameLowerCase)) {\n            const confirmation = window.confirm(`${newName} is already part of the phonebook. Would you like to replace the existing number with a the one provided?`)\n\n            // if user selects cancel, then stop \n            if (!confirmation) {\n                return null\n            }\n            // get existing person object\n            const existingObject = persons.filter(person => {\n                return person.name.toLowerCase() === nameLowerCase\n            })[0]\n\n            // store id of personObject to be updated\n            const id = existingObject.id\n\n            // create new object for this person which has updated number\n            const newObject = {\n                ...existingObject,\n                number: newNumber\n            }\n\n            // send PUT request to update db\n            personsService.update(id, newObject)\n                .then(updatedPerson => {\n                    // update was successful, take response data and update state variable\n                    const updatedPersons = persons.map(person =>\n                        person.id === id ? updatedPerson : person)\n                    setPersons(updatedPersons)\n\n                    // add message to inform user the update was successful\n                    handleSetMessages(`Phone number for ${updatedPerson.name} has been updated.`)\n\n                    // reset form inputs\n                    setNewName('')\n                    setNewNumber('')\n                })\n                .catch(error => {\n                    // handleSetErrors(`Could not update the entry for ${existingObject.name} as it has been removed from the server.`)\n                    // setPersons(persons.filter(person => person.id !== id))\n\n                    // errors are handled by backend, return error message only\n                    handleSetErrors(error.response.data.error)\n                })\n\n\n            // prevent application from executing any further\n            return null\n        }\n\n        // create object with user inputs for creating new db entry\n        const personObject = {\n            name: newName,\n            number: newNumber\n        }\n\n        // sendPOST request to db, so user data is retained across sessions\n        personsService.create(personObject)\n            .then(newPerson => {\n                setPersons(persons.concat(newPerson))\n\n                // add message to inform user the update was successful\n                handleSetMessages(`Added new entry for ${personObject.name}`)\n\n                // empty input field values\n                setNewName('')\n                setNewNumber('')\n            })\n            .catch(error => {\n                // error is sent back as part of error.response.data\n                // custom ValidationError is added to the end via '.error'\n                handleSetErrors(error.response.data.error)\n            })\n    }\n\n    const deletePerson = (id) => {\n        // find out index by creating array of id's, then searching for id passed through\n        const index = persons.map(person => person.id).indexOf(id)\n        const confirmation = window.confirm(`Do you want to delete ${persons[index].name}?`)\n\n        // if user cancels prompt, do nothing\n        if (!confirmation) {\n            return null\n        }\n\n        // send HTTP DELETE request to db, handle errors\n        personsService.remove(id)\n            .then(response => {\n                // make sure that the delete was successful before updating persons variable\n                setPersons(persons.filter(person => person.id !== id))\n                handleSetMessages(`Information for ${persons[index].name} has been removed from the server.`)\n            })\n            .catch(error => {\n                handleSetErrors(`The entry for ${persons[index].name} has already been removed from the server.`)\n                setPersons(persons.filter(person => person.id !== id))\n            })\n\n    }\n\n    // filter array\n    // only include names that match string inputted - case is ignored\n    const personsToShow = persons.filter(\n        person => person.name\n            .toLowerCase()\n            .includes(searchTerm.toLowerCase()))\n\n    return (\n        <div>\n            <h1>Phonebook</h1>\n            <Messages message={errors} type='error' />\n            <Messages message={messages} type='feedback' />\n            <Filter searchTerm={searchTerm} handleSearchChange={handleSearchChange} />\n            <h2>add a new</h2>\n            <PersonForm addPerson={addPerson} newName={newName}\n                newNumber={newNumber} handleNameChange={handleNameChange} handleNumberChange={handleNumberChange} />\n            <h2>Numbers</h2>\n            <Persons data={personsToShow} deletePerson={deletePerson} />\n        </div>\n    )\n}\n\nexport default App","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App'\nimport './index.css'\n\nReactDOM.render(\n    <App />,\n    document.getElementById('root')\n);"],"sourceRoot":""}